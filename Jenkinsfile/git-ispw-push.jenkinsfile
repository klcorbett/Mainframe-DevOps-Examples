#!/usr/bin/env groovy
import hudson.model.*
import hudson.EnvVars
import groovy.json.JsonSlurper
import groovy.json.JsonBuilder
import groovy.json.JsonOutput
import java.net.URL


String Git_Credentials      = "github"
String Git_Branch           = "master"
def filetype = ["cbl", "jcl", "cpy", "clist"]
		 
def runCommand(cmd, workspacedir) 
{
    def exists = fileExists "${workspacedir}\\output.txt"

    if (exists) {
        bat(returnStatus:true , script: "del ${workspacedir}\\output.txt")
    } 
    
    cmd = cmd + " > ${workspacedir}\\output.txt"
       
    if (isUnix()){
         return sh(returnStatus:true , script: '#!/bin/sh -e\n' + cmd).trim()
     } else{
       status = bat(returnStatus:true , script: cmd)
       //echo "Command Returned Status: " + status
       output = readFile "${workspacedir}\\output.txt"
       //echo "Command Output: " + output
       return status
    } 
}

 def gitcheckout(String URL, String Branch, String Credentials, String Folder)
 {
        println "Scenario " + URL
        println "Scenario " + Branch
        println "Scenario " + Credentials
        checkout changelog: false, poll: false, 
        scm: [$class: 'GitSCM', 
        branches: [[name: "*/${Branch}"]], 
        doGenerateSubmoduleConfigurations: false, 
        extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: "${Folder}"], 
        [$class: 'LocalBranch', localBranch: 'local']], 
        submoduleCfg: [], 
        userRemoteConfigs: [[credentialsId: "${Credentials}", name: 'origin', url: "${URL}"]]]
 }

node{

    stage("Retrieve Code From git")
    {
        Git_URL = "https://github.com/steve-kansa/SXK1"
        gitcheckout(Git_URL, Git_Branch, Git_Credentials, "gitsource")
    }
 
    stage("Move to ISPW"){

        workspacedir = "${WORKSPACE}"
        
        dir("gitsource")
        {
            println("Determining changed files")
            changes = sh(returnStdout: true, script: "#!/bin/sh -e\n git log -n 1 --name-status | grep -E ^[AMD][[:space:]] | sort | uniq")
            //println("Determining deleted files")
            //deletedFiles = sh(returnStdout: true, script: "#!/bin/sh -e\n git log -n 1 --name-status | grep -E ^D[[:space:]] | sort | uniq")
            //println("Determining added files")
            //addedFiles = sh(returnStdout: true, script: "#!/bin/sh -e\n git log -n 1  --name-status | grep -E ^A[[:space:]] | sort | uniq")
            //println("Determining added files")
            //renamedFiles = sh(returnStdout: true, script: "#!/bin/sh -e\n git log -n 1 --name-status | grep -E ^R[[:space:]] | sort | uniq")
            //println("Determining added files")
            //copiedFiles = sh(returnStdout: true, script: "#!/bin/sh -e\n git log -n 1 --name-status | grep -E ^C[[:space:]] | sort | uniq")
        }
        echo "Retrieved changes files from git"
        filetype.each{
            cmd = sh(returnStdout: true, script: "#!/bin/sh -e\n mkdir -p ./ftp/${it} \n")
            echo "Created directory for: " + it       
        }
        println "Processing changed files"
        echo changes
        
        changeslist = changes.split('\n')

        println "Processing Changes"
        modifiedfile = changeslist.findAll { item -> item.startsWith('A') }
        addedfile = changeslist.find { item -> item.startsWith('A') }
        deletedfile = changeslist.find { item -> item.startsWith('D') }

        echo "Processing Modified Files"

        cmd = "#!/bin/sh -e\n "

        cobollmembers = []
        jclmembers = []
        clistmembers = []

        modifiedfile.each{
            //echo it
            file = it.substring(2)
            filename = file.split("/")
            member = filename[2].split("\\.")
            membertype = member[1]
            membername = member[0]
            //echo "Member Type->${membertype}\nMember->${membername}\nFile->${file}\n"

            cmd = cmd + "cp gitsource/${file} ./ftp/${membertype}/${membername}\n"
            if(membertype == "cbl"){
                //echo "Adding Cobol->" + membername
                cobollmembers.add("${membername}")
            }
            else if(membertype == "jcl"){
                //echo "Adding JOB->" + membername
                jclmembers.add("${membername}")
            }
            else if(membertype == "clist"){
                //echo "Adding CLIST->" + membername
                clistmembers.add("${membername}")
            }
        }
        echo "adding tasks in ispw"
        cobollmembers.each{
            
    cmd = '''#!/bin/sh -e\n curl --request POST --url 'http://cwcc:2020/ispw/connectionName/assignments/SXK1000024/task/add?checkout=true'
--header 'Authorization: d01c2aa5-5ee9-4d95-8368-7a5effd6e79f'
--header 'Content-Type: application/json'
--data '{
  "application": "SXK1",
  "checkoutFromLevel": "PRD",
	"runtimeConfiguration": "ISPW",
  "owner": "PFHSXK0",
  "path": "DEV1",
  "stream": "FTSDEMO",
  "taskName": "TREXX01",
  "type": "CLST"
}'''

    //cmd = "#!/bin/sh -e\n curl -X GET -s --url 'http://cwcc:2020/ispw/connectionName/assignments/SXK1000024/tasks' -H 'Content-Type: application/json' -H 'Authorization: d01c2aa5-5ee9-4d95-8368-7a5effd6e79f'"
    //output = sh(returnStdout: true, script: cmd)
    //echo output

    def ISPWAPI = 'http://cwcc:2020/ispw/connectionName/assignments/SXK1000024/tasks/add?checkout=true'
    def payload = JsonOutput.toJson([application      : "SXK1",
                                     runtimeConfiguration  : "ISPW",
                                     checkoutFromLevel   : "PRD",
                                     owner  : "PFHSXK0",
                                     path  : "DEV1",
                                     stream  : "FTSDEMO",
                                     taskName  : "TPROG01",
                                     type  : "COB"])
    cmd = "#!/bin/sh -e\n curl -s --request POST --url '${ISPWAPI}'--data '${payload}\' -H 'Content-Type: application/json' -H 'Authorization: d01c2aa5-5ee9-4d95-8368-7a5effd6e79f'"
    output = sh(returnStdout: true, script: cmd)
    echo output

    }

        echo cmd
        sh(returnStdout: true, script: cmd)


        filetype.each{
            dir("ftp/${it}")
            {
                if (it == "jcl"){
                    ISPWdirectory = '''\'SALESSUP.SXK1.DEV1.JOB\''''
                    ftpPublisher alwaysPublishFromMaster: false, continueOnError: false, failOnError: false, 
                    publishers: [[configName: 'cwcc', 
                    transfers: [[asciiMode: true, cleanRemote: false, excludes: '', flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', 
                    remoteDirectory: ISPWdirectory, 
                    remoteDirectorySDF: false, removePrefix: '', sourceFiles: '*']], 
                    usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: true]]
                }
            }
        }
    }
} 
