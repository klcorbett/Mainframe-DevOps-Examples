#!/usr/bin/env groovy
import hudson.model.*
import hudson.EnvVars
import groovy.json.JsonSlurper
import groovy.json.JsonBuilder
import groovy.json.JsonOutput
import java.net.URL


 String Git_Credentials      = "github"
 String Git_Branch           = "master"
		 
def runCommand(cmd, workspacedir) 
{
    def exists = fileExists "${workspacedir}\\output.txt"

    if (exists) {
        bat(returnStatus:true , script: "del ${workspacedir}\\output.txt")
    } 
    
    cmd = cmd + " > ${workspacedir}\\output.txt"
       
    if (isUnix()){
         return sh(returnStatus:true , script: '#!/bin/sh -e\n' + cmd).trim()
     } else{
       status = bat(returnStatus:true , script: cmd)
       //echo "Command Returned Status: " + status
       output = readFile "${workspacedir}\\output.txt"
       //echo "Command Output: " + output
       return status
    } 
}

 def gitcheckout(String URL, String Branch, String Credentials, String Folder)
 {
        println "Scenario " + URL
        println "Scenario " + Branch
        println "Scenario " + Credentials
        checkout changelog: false, poll: false, 
        scm: [$class: 'GitSCM', 
        branches: [[name: "*/${Branch}"]], 
        doGenerateSubmoduleConfigurations: false, 
        extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: "${Folder}"], 
        [$class: 'LocalBranch', localBranch: 'local']], 
        submoduleCfg: [], 
        userRemoteConfigs: [[credentialsId: "${Credentials}", name: 'origin', url: "${URL}"]]]
 }

node{

    stage("Retrieve Code From git")
    {
        Git_URL = "https://github.com/steve-kansa/SXK1"
        gitcheckout(Git_URL, Git_Branch, Git_Credentials, "gitsource")
    }
 
    stage("Move to ISPW"){

        workspacedir = "${WORKSPACE}"
        
        dir("gitsource")
        {
            modifiedFiles = sh(returnStdout: true, script: "#!/bin/sh -e\n git log -n 1 --name-status | grep -E ^M[[:space:]] | sort | uniq")
            deletedFiles = sh(returnStdout: true, script: "#!/bin/sh -e\n git log -n 1 --name-status | grep -E ^D[[:space:]] | sort | uniq")
            addedFiles = sh(returnStdout: true, script: "#!/bin/sh -e\n git log -n 1  --name-status | grep -E ^A[[:space:]] | sort | uniq")
            renamedFiles = sh(returnStdout: true, script: "#!/bin/sh -e\n git log -n 1 --name-status | grep -E ^R[[:space:]] | sort | uniq")
            copiedFiles = sh(returnStdout: true, script: "#!/bin/sh -e\n git log -n 1 --name-status | grep -E ^C[[:space:]] | sort | uniq")
        }
        echo "retrieved changes files from git"
        println "Processing added files
        "
        buf = addedFiles.split('\n') //TODO need to make sure the list of files doesn't contain a blank item or substring below fails

        buf.each{
            file = it.substring(2)
            filename = file.split("/")
            member = filename[2].split("\\.")
            membertype = member[1]
            membername = member[0]
            //echo "Member Type->${membertype}\nMember->${membername}\nFile->${file}\n"

            if(membertype == "jcl")
            {
            cmd = "#!/bin/sh -e\n mkdir -p ./ftp/jcl | cp gitsource/${file} ./ftp/jcl/${membername}"
            //echo cmd
            sh(returnStdout: true, script: cmd)
            }



        }
            
        dir("ftp/jcl")
        {
            ftpPublisher alwaysPublishFromMaster: false, continueOnError: false, failOnError: false, 
            publishers: [[configName: 'cwcc', 
            transfers: [[asciiMode: true, cleanRemote: false, excludes: '', flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', 
            remoteDirectory: '''\'SALESSUP.SXK1.DEV1.COB\'''', 
            remoteDirectorySDF: false, removePrefix: '', sourceFiles: '*']], 
            usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: true]]
        }
    }
} 
